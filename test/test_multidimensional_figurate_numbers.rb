require 'minitest/autorun'
require_relative '../lib/figurate_numbers'

class TestMultiDimensionalFigurateNumbers < Minitest::Test # rubocop:disable Metrics/ClassLength
  def test_pentatope
    assert_equal([1, 5, 15, 35, 70, 126, 210, 330, 495, 715, 1001, 1365, 1820, 2380, 3060, 3876, 4845, 5985, 7315, 8855, 10_626, 12_650, 14_950, 17_550, 20_475], MultiDimensionalFigurateNumbers.pentatope.take(25))
  end

  def test_k_dimensional_hypertetrahedron
    assert_equal([1, 15, 120, 680, 3060, 11_628, 38_760, 116_280, 319_770, 817_190, 1_961_256, 4_457_400, 9_657_700, 20_058_300, 40_116_600, 77_558_760, 145_422_675, 265_182_525, 471_435_600, 818_809_200, 1_391_975_640, 2_319_959_400, 3_796_297_200, 6_107_086_800, 9_669_554_100, 15_084_504_396, 23_206_929_840, 35_240_152_720, 52_860_229_080, 78_378_960_360, 114_955_808_528, 166_871_334_960, 239_877_544_005, 341_643_774_795, 482_320_623_240, 675_248_872_536, 937_845_656_300, 1_292_706_174_900, 1_768_966_344_600, 2_403_979_904_200, 3_245_372_870_670, 4_353_548_972_850, 5_804_731_963_800, 7_694_644_696_200, 10_142_940_735_900], MultiDimensionalFigurateNumbers.k_dimensional_hypertetrahedron(14).take(45))
  end

  def test_five_dimensional_hypertetrahedron
    assert_equal([1, 6, 21, 56, 126, 252, 462, 792, 1287, 2002, 3003, 4368, 6188, 8568, 11_628, 15_504, 20_349, 26_334, 33_649, 42_504], MultiDimensionalFigurateNumbers.five_dimensional_hypertetrahedron.take(20))
  end

  def test_six_dimensional_hypertetrahedron
    assert_equal([1, 7, 28, 84, 210, 462, 924, 1716, 3003, 5005, 8008, 12_376, 18_564, 27_132, 38_760, 54_264, 74_613, 100_947, 134_596, 177_100], MultiDimensionalFigurateNumbers.six_dimensional_hypertetrahedron.take(20))
  end

  def test_biquadratic
    assert_equal([1, 16, 81, 256, 625, 1296, 2401, 4096, 6561, 10_000], MultiDimensionalFigurateNumbers.biquadratic.take(10))
  end

  def test_k_dimensional_hypercube
    assert_equal([1, 64, 729, 4096, 15_625, 46_656, 117_649, 262_144, 531_441, 1_000_000, 1_771_561, 2_985_984, 4_826_809, 7_529_536, 11_390_625], MultiDimensionalFigurateNumbers.k_dimensional_hypercube(6).take(15))
  end

  def test_five_dimensional_hypercube
    assert_equal([1, 32, 243, 1024, 3125, 7776, 16_807, 32_768, 59_049, 100_000, 161_051, 248_832, 371_293, 537_824, 759_375, 1_048_576, 1_419_857, 1_889_568, 2_476_099, 3_200_000, 4_084_101, 5_153_632, 6_436_343, 7_962_624, 9_765_625], MultiDimensionalFigurateNumbers.five_dimensional_hypercube.take(25))
  end

  def test_six_dimensional_hypercube
    assert_equal([1, 64, 729, 4096, 15_625, 46_656, 117_649, 262_144, 531_441, 1_000_000, 1_771_561, 2_985_984, 4_826_809, 7_529_536, 11_390_625, 16_777_216, 24_137_569, 34_012_224, 47_045_881, 64_000_000, 85_766_121, 113_379_904, 148_035_889, 191_102_976, 244_140_625], MultiDimensionalFigurateNumbers.six_dimensional_hypercube.take(25))
  end

  def test_hyperoctahedral
    assert_equal([1, 8, 33, 96, 225, 456, 833, 1408, 2241, 3400, 4961, 7008, 9633, 12_936, 17_025, 22_016, 28_033, 35_208, 43_681, 53_600, 65_121, 78_408, 93_633, 110_976, 130_625, 152_776, 177_633, 205_408, 236_321, 270_600], MultiDimensionalFigurateNumbers.hyperoctahedral.take(30))
  end

  def test_hypericosahedral
    assert_equal([1, 120, 947, 3652, 9985, 22_276, 43_435, 76_952, 126_897, 197_920, 295_251, 424_700, 592_657, 806_092, 1_072_555, 1_400_176, 1_797_665, 2_274_312, 2_839_987, 3_505_140, 4_280_801, 5_178_580, 6_210_667, 7_389_832, 8_729_425, 10_243_376, 11_946_195, 13_852_972, 15_979_377, 18_341_660], MultiDimensionalFigurateNumbers.hypericosahedral.take(30))
  end

  def test_hyperdodecahedral
    assert_equal([1, 600, 4983, 19_468, 53_505, 119_676, 233_695, 414_408, 683_793, 1_066_960, 1_592_151, 2_290_740, 3_197_233, 4_349_268, 5_787_615, 7_556_176, 9_701_985, 12_275_208, 15_329_143, 18_920_220, 23_108_001, 27_955_180, 33_527_583, 39_894_168, 47_127_025, 55_301_376, 64_495_575, 74_791_108, 86_272_593, 99_027_780], MultiDimensionalFigurateNumbers.hyperdodecahedral.take(30))
  end

  def test_polyoctahedral
    assert_equal([1, 24, 153, 544, 1425, 3096, 5929, 10_368, 16_929, 26_200, 38_841, 55_584, 77_233, 104_664, 138_825, 180_736, 231_489, 292_248, 364_249, 448_800, 547_281, 661_144, 791_913, 941_184, 1_110_625, 1_301_976, 1_517_049, 1_757_728, 2_025_969, 2_323_800, 2_653_321, 3_016_704, 3_416_193, 3_854_104, 4_332_825, 4_854_816, 5_422_609, 6_038_808, 6_706_089, 7_427_200, 8_204_961, 9_042_264, 9_942_073, 10_907_424, 11_941_425, 13_047_256, 14_228_169, 15_487_488, 16_828_609, 18_255_000], MultiDimensionalFigurateNumbers.polyoctahedral.take(50))
  end

  def test_four_dimensional_hyperoctahedron
    assert_equal([1, 8, 33, 96, 225, 456, 833, 1408, 2241, 3400, 4961, 7008, 9633, 12_936, 17_025, 22_016, 28_033, 35_208, 43_681, 53_600, 65_121, 78_408, 93_633, 110_976, 130_625, 152_776, 177_633, 205_408, 236_321, 270_600, 308_481, 350_208, 396_033, 446_216, 501_025, 560_736, 625_633, 696_008, 772_161, 854_400, 943_041, 1_038_408, 1_140_833, 1_250_656, 1_368_225, 1_493_896, 1_628_033, 1_771_008, 1_923_201, 2_085_000], MultiDimensionalFigurateNumbers.four_dimensional_hyperoctahedron.take(50))
  end

  def test_five_dimensional_hyperoctahedron
    assert_equal([1, 10, 51, 180, 501, 1182, 2471, 4712, 8361, 14_002, 22_363, 34_332, 50_973, 73_542, 103_503, 142_544, 192_593, 255_834, 334_723, 432_004, 550_725, 694_254, 866_295, 1_070_904, 1_312_505, 1_595_906, 1_926_315, 2_309_356, 2_751_085, 3_258_006, 3_837_087, 4_495_776, 5_242_017, 6_084_266, 7_031_507, 8_093_268, 9_279_637, 10_601_278, 12_069_447, 13_696_008, 15_493_449, 17_474_898, 19_654_139, 22_045_628, 24_664_509, 27_526_630, 30_648_559, 34_047_600, 37_741_809, 41_750_010], MultiDimensionalFigurateNumbers.five_dimensional_hyperoctahedron.take(50))
  end

  def test_six_dimensional_hyperoctahedron
    assert_equal([1, 12, 73, 304, 985, 2668, 6321, 13_504, 26_577, 48_940, 85_305, 142_000, 227_305, 351_820, 528_865, 774_912, 1_110_049, 1_558_476, 2_149_033, 2_915_760, 3_898_489, 5_143_468, 6_704_017, 8_641_216, 11_024_625, 13_933_036, 17_455_257, 21_690_928, 26_751_369, 32_760_460, 39_855_553, 48_188_416, 57_926_209, 69_252_492, 82_368_265, 97_493_040, 114_865_945, 134_746_860, 157_417_585, 183_183_040, 212_372_497, 245_340_844, 282_469_881, 324_169_648, 370_879_785, 423_070_924, 481_246_113, 545_942_272, 617_731_681, 697_223_500], MultiDimensionalFigurateNumbers.six_dimensional_hyperoctahedron.take(50))
  end

  def test_seven_dimensional_hyperoctahedron
    assert_equal([1, 14, 99, 476, 1765, 5418, 14_407, 34_232, 74_313, 149_830], MultiDimensionalFigurateNumbers.seven_dimensional_hyperoctahedron.take(10))
  end

  def test_eight_dimensional_hyperoctahedron
    assert_equal([1, 16, 129, 704, 2945, 10_128, 29_953, 78_592, 187_137, 411_280], MultiDimensionalFigurateNumbers.eight_dimensional_hyperoctahedron.take(10))
  end

  def test_nine_dimensional_hyperoctahedron
    assert_equal([1, 18, 163, 996, 4645, 17_718, 57_799, 166_344, 432_073, 1_030_490], MultiDimensionalFigurateNumbers.nine_dimensional_hyperoctahedron.take(10))
  end

  def test_ten_dimensional_hyperoctahedron
    assert_equal([1, 20, 201, 1360, 7001, 29_364, 104_881, 329_024, 927_441, 2_390_004], MultiDimensionalFigurateNumbers.ten_dimensional_hyperoctahedron.take(10))
  end

  def test_k_dimensional_hyperoctahedron
    assert_equal([1, 26, 339, 2964, 19_605, 104_910, 474_215, 1_866_280, 6_539_625, 20_758_530, 60_511_803, 163_786_428, 415_382_397, 994_551_222, 2_262_406_095, 4_916_055_120, 10_250_995_665, 20_594_048_490, 39_997_954_595, 75_328_091_620, 137_924_473_701, 246_091_725_726, 428_760_149_559, 730_777_112_184, 1_220_435_354_425, 2_000_029_880_786, 3_220_465_235_211, 5_101_218_625_804, 7_957_311_102_029, 12_235_359_613_830, 18_561_289_434_015, 27_802_892_687_520, 41_151_139_742_625, 60_225_002_787_770, 87_205_553_639_155, 125_006_271_205_428, 177_487_860_620_853, 249_727_470_560_622, 348_354_024_688_647, 481_963_487_019_720, 661_630_291_251_465, 901_533_915_618_210, 1_219_722_715_205_595, 1_639_040_673_649_500, 2_188_246_749_634_845, 2_903_361_017_882_966, 3_829_276_890_177_391, 5_021_684_403_938_544, 6_549_355_942_310_769, 8_496_852_863_123_850], MultiDimensionalFigurateNumbers.k_dimensional_hyperoctahedron(13).take(50))
  end

  def test_four_dimensional_mgonal_pyramidal
    assert_equal([1, 10, 40, 110, 245, 476, 840, 1380, 2145, 3190, 4576, 6370, 8645, 11_480, 14_960, 19_176, 24_225, 30_210, 37_240, 45_430, 54_901, 65_780, 78_200, 92_300, 108_225, 126_126, 146_160, 168_490, 193_285, 220_720, 250_976, 284_240, 320_705, 360_570, 404_040, 451_326, 502_645, 558_220, 618_280, 683_060, 752_801, 827_750, 908_160, 994_290, 1_086_405, 1_184_776, 1_289_680, 1_401_400, 1_520_225, 1_646_450], MultiDimensionalFigurateNumbers.four_dimensional_mgonal_pyramidal(8).take(50))
  end

  def test_four_dimensional_square_pyramidal
    assert_equal([1, 6, 20, 50, 105, 196, 336, 540, 825, 1210], MultiDimensionalFigurateNumbers.four_dimensional_square_pyramidal.take(10))
  end

  def test_four_dimensional_pentagonal_pyramidal
    assert_equal([1, 7, 25, 65, 140, 266, 462, 750, 1155, 1705], MultiDimensionalFigurateNumbers.four_dimensional_pentagonal_pyramidal.take(10))
  end

  def test_four_dimensional_hexagonal_pyramidal
    assert_equal([1, 8, 30, 80, 175, 336, 588, 960, 1485, 2200], MultiDimensionalFigurateNumbers.four_dimensional_hexagonal_pyramidal.take(10))
  end

  def test_four_dimensional_heptagonal_pyramidal
    assert_equal([1, 9, 35, 95, 210, 406, 714, 1170, 1815, 2695], MultiDimensionalFigurateNumbers.four_dimensional_heptagonal_pyramidal.take(10))
  end

  def test_four_dimensional_octagonal_pyramidal
    assert_equal([1, 10, 40, 110, 245, 476, 840, 1380, 2145, 3190], MultiDimensionalFigurateNumbers.four_dimensional_octagonal_pyramidal.take(10))
  end

  def test_four_dimensional_nonagonal_pyramidal
    assert_equal([1, 11, 45, 125, 280, 546, 966, 1590, 2475, 3685], MultiDimensionalFigurateNumbers.four_dimensional_nonagonal_pyramidal.take(10))
  end

  def test_four_dimensional_decagonal_pyramidal
    assert_equal([1, 12, 50, 140, 315, 616, 1092, 1800, 2805, 4180], MultiDimensionalFigurateNumbers.four_dimensional_decagonal_pyramidal.take(10))
  end

  def test_four_dimensional_hendecagonal_pyramidal
    assert_equal([1, 13, 55, 155, 350, 686, 1218, 2010, 3135, 4675], MultiDimensionalFigurateNumbers.four_dimensional_hendecagonal_pyramidal.take(10))
  end

  def test_four_dimensional_dodecagonal_pyramidal
    assert_equal([1, 14, 60, 170, 385, 756, 1344, 2220, 3465, 5170], MultiDimensionalFigurateNumbers.four_dimensional_dodecagonal_pyramidal.take(10))
  end

  def test_k_dimensional_mgonal_pyramidal
    assert_equal([1, 15, 117, 637, 2730, 9828, 30_940, 87_516, 226_746, 545_870, 1_234_506, 2_645_370, 5_408_312, 10_608_612, 20_058_300, 36_699_260, 65_189_475, 112_739_445, 190_285_095, 314_106_975, 508_033_890, 806_403_000, 1_257_988_680, 1_931_159_880, 2_920_581_300, 4_355_838_396, 6_412_441_140, 9_325_747_732, 13_408_448_352, 19_072_361_880, 26_855_426_728, 37_454_912_040, 51_768_039_141, 70_941_386_971, 96_430_661_145, 130_072_636_161, 174_171_336_170, 231_600_803_772, 305_927_120_772, 401_552_692_100, 523_886_186_670, 679_541_949_450, 876_573_160_190, 1_124_743_518_990, 1_435_842_790_200, 1_824_052_137_180, 2_306_365_834_500, 2_903_076_654_660, 3_638_332_996_935, 4_540_776_660_225, 5_644_271_063_691, 6_988_730_692_515, 8_621_063_595_522, 10_596_239_890_992, 12_978_500_451_280], MultiDimensionalFigurateNumbers.k_dimensional_mgonal_pyramidal(12, 5).take(55))
  end

  def test_five_dimensional_mgonal_pyramidal
    assert_equal([1, 12, 57, 182, 462, 1008, 1974, 3564, 6039, 9724, 15_015, 22_386, 32_396, 45_696, 63_036, 85_272, 113_373, 148_428, 191_653, 244_398, 308_154, 384_560, 475_410, 582_660, 708_435, 855_036, 1_024_947, 1_220_842, 1_445_592, 1_702_272, 1_994_168, 2_324_784, 2_697_849, 3_117_324, 3_587_409], MultiDimensionalFigurateNumbers.five_dimensional_mgonal_pyramidal(9).take(35))
  end

  def test_five_dimensional_square_pyramidal
    assert_equal([1, 7, 27, 77, 182, 378, 714, 1254, 2079, 3289], MultiDimensionalFigurateNumbers.five_dimensional_square_pyramidal.take(10))
  end

  def test_five_dimensional_pentagonal_pyramidal
    assert_equal([1, 8, 33, 98, 238, 504, 966, 1716, 2871, 4576], MultiDimensionalFigurateNumbers.five_dimensional_pentagonal_pyramidal.take(10))
  end

  def test_five_dimensional_hexagonal_pyramidal
    assert_equal([1, 9, 39, 119, 294, 630, 1218, 2178, 3663, 5863], MultiDimensionalFigurateNumbers.five_dimensional_hexagonal_pyramidal.take(10))
  end

  def test_five_dimensional_heptagonal_pyramidal
    assert_equal([1, 10, 45, 140, 350, 756, 1470, 2640, 4455, 7150], MultiDimensionalFigurateNumbers.five_dimensional_heptagonal_pyramidal.take(10))
  end

  def test_five_dimensional_octagonal_pyramidal
    assert_equal([1, 11, 51, 161, 406, 882, 1722, 3102, 5247, 8437], MultiDimensionalFigurateNumbers.five_dimensional_octagonal_pyramidal.take(10))
  end

  def test_six_dimensional_mgonal_pyramidal
    assert_equal([1, 20, 119, 448, 1302, 3192, 6930, 13_728, 25_311, 44_044, 73_073, 116_480, 179_452, 268_464, 391_476, 558_144, 780_045, 1_070_916, 1_446_907, 1_926_848, 2_532_530, 3_289_000, 4_224_870, 5_372_640, 6_769_035, 8_455_356, 10_477_845, 12_888_064, 15_743_288, 19_106_912, 23_048_872, 27_646_080, 32_982_873, 39_151_476, 46_252_479, 54_395_328, 63_698_830, 74_291_672, 86_312_954, 99_912_736, 115_252_599, 132_506_220, 151_859_961, 173_513_472, 197_680_308], MultiDimensionalFigurateNumbers.six_dimensional_mgonal_pyramidal(16).take(45))
  end

  def test_six_dimensional_square_pyramidal
    assert_equal([1, 8, 35, 112, 294, 672, 1386, 2640, 4719, 8008, 13_013, 20_384, 30_940, 45_696, 65_892], MultiDimensionalFigurateNumbers.six_dimensional_square_pyramidal.take(15))
  end

  def test_six_dimensional_pentagonal_pyramidal
    assert_equal([1, 9, 42, 140, 378, 882, 1848, 3564, 6435, 11_011, 18_018, 28_392, 43_316, 64_260, 93_024], MultiDimensionalFigurateNumbers.six_dimensional_pentagonal_pyramidal.take(15))
  end

  def test_six_dimensional_hexagonal_pyramidal
    assert_equal([1, 10, 49, 168, 462, 1092, 2310, 4488, 8151, 14_014, 23_023, 36_400, 55_692, 82_824, 120_156], MultiDimensionalFigurateNumbers.six_dimensional_hexagonal_pyramidal.take(15))
  end

  def test_six_dimensional_heptagonal_pyramidal
    assert_equal([1, 11, 56, 196, 546, 1302, 2772, 5412, 9867, 17_017, 28_028, 44_408, 68_068, 101_388, 147_288], MultiDimensionalFigurateNumbers.six_dimensional_heptagonal_pyramidal.take(15))
  end

  def test_six_dimensional_octagonal_pyramidal
    assert_equal([1, 12, 63, 224, 630, 1512, 3234, 6336, 11_583, 20_020, 33_033, 52_416, 80_444, 119_952, 174_420], MultiDimensionalFigurateNumbers.six_dimensional_octagonal_pyramidal.take(15))
  end

  def test_centered_biquadratic
    assert_equal([1, 17, 97, 337, 881, 1921, 3697, 6497, 10_657, 16_561, 24_641, 35_377, 49_297, 66_977, 89_041, 116_161, 149_057, 188_497, 235_297, 290_321], MultiDimensionalFigurateNumbers.centered_biquadratic.take(20))
  end

  def test_k_dimensional_centered_hypercube
    assert_equal([1, 524_289, 1_162_785_755, 276_040_168_411, 19_348_364_235_069, 628_433_226_338_621, 12_008_254_925_383_639, 155_514_083_261_229_015, 1_494_966_905_748_847_961, 11_350_851_717_672_992_089, 71_159_090_448_414_546_291, 380_639_089_819_037_473_139, 1_781_400_289_746_069_037_525, 7_438_224_249_324_360_507_861, 28_144_682_159_479_920_256_559, 97_726_241_926_445_329_278_511, 314_630_299_411_065_648_266_289, 947_307_781_040_489_001_204_785, 2_686_655_001_015_651_265_481_611, 7_221_299_655_660_313_589_123_979, 18_491_376_640_331_026_125_580_781, 45_313_473_853_349_391_771_396_589, 106_680_448_140_609_076_207_724_295, 242_115_000_837_615_863_633_192_711, 531_297_410_619_196_448_237_299_849, 1_130_265_145_909_533_185_640_638_601, 2_336_510_164_282_443_502_115_157_539, 4_703_347_349_111_490_043_111_339_555, 9_236_565_696_619_399_921_049_654_661, 17_725_875_916_589_991_489_578_849_669], MultiDimensionalFigurateNumbers.k_dimensional_centered_hypercube(19).take(30))
  end

  def test_five_dimensional_centered_hypercube
    assert_equal([1, 33, 275, 1267, 4149, 10_901, 24_583, 49_575, 91_817, 159_049, 261_051, 409_883, 620_125, 909_117, 1_297_199, 1_807_951, 2_468_433, 3_309_425, 4_365_667, 5_676_099], MultiDimensionalFigurateNumbers.five_dimensional_centered_hypercube.take(20))
  end

  def test_six_dimensional_centered_hypercube
    assert_equal([1, 65, 793, 4825, 19_721, 62_281, 164_305, 379_793, 793_585, 1_531_441, 2_771_561, 4_757_545, 7_812_793, 12_356_345, 18_920_161, 28_167_841, 40_914_785, 58_149_793, 81_058_105, 111_045_881], MultiDimensionalFigurateNumbers.six_dimensional_centered_hypercube.take(20))
  end

  def test_centered_polytope
    assert_equal([1, 6, 21, 56, 126, 251, 456, 771, 1231, 1876, 2751, 3906, 5396, 7281, 9626, 12_501, 15_981, 20_146, 25_081, 30_876, 37_626, 45_431, 54_396, 64_631, 76_251, 89_376, 104_131, 120_646, 139_056, 159_501, 182_126, 207_081, 234_521, 264_606, 297_501, 333_376, 372_406, 414_771, 460_656, 510_251, 563_751, 621_356, 683_271, 749_706, 820_876, 897_001, 978_306, 1_065_021, 1_157_381, 1_255_626, 1_360_001, 1_470_756, 1_588_146, 1_712_431, 1_843_876, 1_982_751, 2_129_331, 2_283_896, 2_446_731, 2_618_126, 2_798_376, 2_987_781, 3_186_646, 3_395_281, 3_614_001, 3_843_126, 4_082_981, 4_333_896, 4_596_206, 4_870_251, 5_156_376, 5_454_931, 5_766_271, 6_090_756, 6_428_751, 6_780_626, 7_146_756, 7_527_521, 7_923_306, 8_334_501], MultiDimensionalFigurateNumbers.centered_polytope.take(80))
  end

  def test_k_dimensional_centered_hypertetrahedron
    assert_equal([1, 13, 91, 455, 1820, 6188, 18_564, 50_388, 125_970, 293_930, 646_646, 1_352_078, 2_704_155, 5_200_287, 9_657_609, 17_383_405, 30_419_935, 51_889_747, 86_474_661, 141_070_137, 225_666_870, 354_523_390, 547_707_394, 833_099_722, 1_248_973_544, 1_847_282_696, 2_697_817_448, 3_893_413_576, 5_556_431_725, 7_846_758_985, 10_971_623_663, 15_197_557_739, 20_864_889_773, 28_405_204_425, 38_362_263_615, 51_416_949_051, 68_416_856_768, 90_411_251_840, 118_692_175_952, 154_842_592_464, 200_792_553_390, 258_884_480_790, 331_948_771_882, 423_391_063_186, 537_292_624_687, 678_525_500_835, 852_884_171_685, 1_067_235_675_129, 1_329_690_310_507, 1_649_795_235_439, 2_038_753_472_041, 2_509_671_056_333, 3_077_835_296_186, 3_761_027_349_170, 4_579_872_592_750, 5_558_232_536_038, 6_723_642_315_364, 8_107_798_125_908, 9_747_099_269_180, 11_683_249_841_900, 13_963_925_456_481, 16_643_510_767_533, 19_783_913_983_275, 23_455_464_966_167, 27_737_903_974_169, 32_721_468_563_525, 38_508_086_666_595, 45_212_684_374_767, 52_964_617_497_636, 61_909_236_536_212, 72_209_595_300_700, 84_048_314_023_180, 97_629_608_463_114, 113_181_497_179_842, 130_958_199_851_934, 151_242_740_259_286, 174_349_768_311_043, 200_628_616_301_671, 230_466_605_409_665, 264_292_619_319_365], MultiDimensionalFigurateNumbers.k_dimensional_centered_hypertetrahedron(11).take(80))
  end

  def test_five_dimensional_centered_hypertetrahedron
    assert_equal([1, 7, 28, 84, 210, 462, 923, 1709, 2975, 4921, 7798, 11_914, 17_640, 25_416, 35_757, 49_259, 66_605, 88_571, 116_032, 149_968], MultiDimensionalFigurateNumbers.five_dimensional_centered_hypertetrahedron.take(20))
  end

  def test_six_dimensional_centered_hypertetrahedron
    assert_equal([1, 8, 36, 120, 330, 792, 1716, 3431, 6427, 11_404, 19_328, 31_494, 49_596, 75_804, 112_848, 164_109, 233_717, 326_656, 448_876, 607_412], MultiDimensionalFigurateNumbers.six_dimensional_centered_hypertetrahedron.take(20))
  end

  def test_centered_hyperoctahedral
    assert_equal([1, 9, 41, 129, 321, 681, 1289, 2241, 3649, 5641, 8361, 11_969, 16_641, 22_569, 29_961, 39_041, 50_049, 63_241, 78_889, 97_281, 118_721, 143_529, 172_041, 204_609, 241_601, 283_401, 330_409, 383_041, 441_729, 506_921, 579_081, 658_689, 746_241, 842_249, 947_241, 1_061_761, 1_186_369, 1_321_641, 1_468_169, 1_626_561], MultiDimensionalFigurateNumbers.centered_hyperoctahedral.take(40))
  end

  def test_nexus
    assert_equal([1, 33_554_431, 847_255_055_011, 1_125_052_618_233_181, 296_897_323_970_110_501, 28_132_264_806_052_748_251, 1_312_638_331_634_035_199_431, 36_437_863_243_293_196_808_761, 680_119_055_828_895_427_060_681, 9_282_102_012_308_147_411_229_751, 98_347_059_433_883_722_041_830_251, 845_615_107_006_806_407_559_468_181, 6_102_447_848_426_126_536_429_441_261, 37_942_385_790_981_556_448_484_486_931, 207_512_887_134_575_115_502_428_132_751, 1_015_138_917_287_805_912_879_759_846_001, 4_502_976_812_120_172_977_442_866_785_681, 18_318_031_798_594_702_264_975_713_702_511, 68_987_836_477_312_984_892_694_326_586_931, 242_467_824_311_743_910_463_390_389_719_501, 800_727_845_922_724_266_740_722_458_520_501, 2_499_251_872_251_485_580_418_771_854_201_931, 7_410_243_533_745_335_619_014_318_096_967_511, 20_963_891_072_487_273_520_604_142_938_560_681, 56_808_183_325_605_704_247_112_578_099_015_001, 147_955_988_037_955_065_642_904_631_491_203_751, 371_492_957_705_390_120_242_888_827_680_391_931, 901_642_246_235_866_728_861_945_392_100_736_261, 2_120_453_089_678_034_225_211_398_866_754_733_181, 4_842_523_970_802_741_336_806_971_748_525_669_251, 10_759_906_395_501_358_333_837_313_998_767_870_751, 23_302_503_375_185_949_599_084_511_930_203_155_681, 49_265_933_459_856_105_712_853_656_119_470_633_761, 101_828_895_780_007_014_286_990_551_325_721_054_431, 206_039_468_367_489_885_618_361_877_239_850_957_251, 408_611_683_992_293_747_092_011_689_842_522_621_501, 795_123_235_649_389_663_670_366_734_626_479_418_181, 1_519_724_432_255_728_430_628_572_343_620_488_910_011, 2_855_686_883_786_281_894_863_124_090_071_170_099_431, 5_280_183_239_270_075_950_194_797_231_225_325_279_001], MultiDimensionalFigurateNumbers.nexus(24).take(40))
  end

  def test_k_dimensional_centered_hyperoctahedron
    assert_equal([1, 65, 2113, 45_825, 746_241, 9_737_793, 106_114_625, 993_696_769, 8_166_636_545, 59_864_549_953, 396_469_547_585, 2_397_196_917_505, 13_348_247_055_105, 68_954_032_430_145, 332_538_522_833_985, 1_505_357_362_548_737, 6_427_269_150_511_105, 25_991_659_563_764_801, 99_928_969_289_077_825, 366_485_940_838_832_897, 1_286_011_828_550_830_849, 4_329_547_032_027_650_625, 14_019_400_249_152_942_657, 43_761_350_039_110_851_585, 131_955_581_594_696_793_089, 385_095_408_183_758_079_553, 1_089_618_887_377_372_884_545, 2_993_989_196_011_368_428_289, 8_001_035_989_283_143_418_625, 20_824_104_716_955_953_041_473, 52_853_228_343_044_936_894_529, 130_973_644_638_922_564_173_825, 317_241_780_630_136_241_094_657, 751_874_920_284_981_143_173_185, 1_745_319_075_862_302_066_540_609, 3_971_699_634_878_256_948_372_225, 8_867_962_331_174_090_943_697_665, 19_443_209_145_457_653_013_020_225, 41_892_715_808_110_231_862_187_585, 88_765_858_334_732_202_193_255_425], MultiDimensionalFigurateNumbers.k_dimensional_centered_hyperoctahedron(32).take(40))
  end

  def test_five_dimensional_centered_hyperoctahedron
    assert_equal([1, 11, 61, 231, 681, 1683, 3653, 7183, 13_073, 22_363, 36_365, 56_695, 85_305, 124_515, 177_045, 246_047, 335_137, 448_427, 590_557, 766_727], MultiDimensionalFigurateNumbers.five_dimensional_centered_hyperoctahedron.take(20))
  end

  def test_six_dimensional_centered_hyperoctahedron
    assert_equal([1, 13, 85, 377, 1289, 3653, 8989, 19_825, 40_081, 75_517, 134_245, 227_305, 369_305, 579_125, 880_685, 1_303_777, 1_884_961, 2_668_525, 3_707_509, 5_064_793], MultiDimensionalFigurateNumbers.six_dimensional_centered_hyperoctahedron.take(20))
  end

  def test_generalized_pentatope
    assert_equal([3060, 2380, 1820, 1365, 1001, 715, 495, 330, 210, 126, 70, 35, 15, 5, 1, 0, 0, 0, 0, 1, 5, 15, 35, 70, 126, 210, 330, 495, 715, 1001, 1365, 1820, 2380, 3060, 3876, 4845, 5985, 7315, 8855, 10_626], MultiDimensionalFigurateNumbers.generalized_pentatope(18).take(40))
  end

  def test_generalized_k_dimensional_hypertetrahedron
    assert_equal([-100_947, -26_334, -5985, -1140, -171, -18, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 18, 171, 1140, 5985, 26_334, 100_947, 346_104, 1_081_575, 3_124_550, 8_436_285, 21_474_180, 51_895_935, 119_759_850, 265_182_525, 565_722_720, 1_166_803_110, 2_333_606_220, 4_537_567_650, 8_597_496_600, 15_905_368_710], MultiDimensionalFigurateNumbers.generalized_k_dimensional_hypertetrahedron(17, 23).take(45))
  end

  def test_generalized_biquadratic
    assert_equal([0, 1, 16, 81, 256, 625, 1296, 2401, 4096, 6561, 10_000, 14_641, 20_736, 28_561, 38_416, 50_625, 65_536, 83_521, 104_976, 130_321], MultiDimensionalFigurateNumbers.generalized_biquadratic.take(20))
  end

  def test_generalized_k_dimensional_hypercube
    assert_equal([-74_615_470_927_590_710_561_908_487, -32_064_977_213_018_365_645_815_808, -13_248_496_640_331_026_125_580_781, -5_242_880_000_000_000_000_000_000, -1_978_419_655_660_313_589_123_979, -708_235_345_355_337_676_357_632, -239_072_435_685_151_324_847_153, -75_557_863_725_914_323_419_136, -22_168_378_200_531_005_859_375, -5_976_303_958_948_914_397_184, -1_461_920_290_375_446_110_677, -319_479_999_370_622_926_848, -61_159_090_448_414_546_291, -10_000_000_000_000_000_000, -1_350_851_717_672_992_089, -144_115_188_075_855_872, -11_398_895_185_373_143, -609_359_740_010_496, -19_073_486_328_125, -274_877_906_944, -1_162_261_467, -524_288, -1, 0, 1, 524_288, 1_162_261_467, 274_877_906_944, 19_073_486_328_125, 609_359_740_010_496, 11_398_895_185_373_143, 144_115_188_075_855_872, 1_350_851_717_672_992_089, 10_000_000_000_000_000_000, 61_159_090_448_414_546_291, 319_479_999_370_622_926_848, 1_461_920_290_375_446_110_677, 5_976_303_958_948_914_397_184, 22_168_378_200_531_005_859_375, 75_557_863_725_914_323_419_136, 239_072_435_685_151_324_847_153, 708_235_345_355_337_676_357_632, 1_978_419_655_660_313_589_123_979, 5_242_880_000_000_000_000_000_000, 13_248_496_640_331_026_125_580_781], MultiDimensionalFigurateNumbers.generalized_k_dimensional_hypercube(19, 23).take(45))
  end

  def test_generalized_hyperoctahedral
    assert_equal([0, 1, 8, 33, 96, 225, 456, 833, 1408, 2241, 3400, 4961, 7008, 9633, 12_936, 17_025, 22_016, 28_033, 35_208, 43_681], MultiDimensionalFigurateNumbers.generalized_hyperoctahedral.take(20))
  end

  def test_generalized_k_dimensional_hyperoctahedron
    assert_equal([15_671_921_130_497, 8_025_697_116_448, 3_998_179_870_209, 1_933_232_552_320, 905_007_786_497, 409_008_911_904, 177_880_832_001, 74_174_404_608, 29_532_022_785, 11_172_756_000, 3_994_294_785, 1_340_645_760, 419_239_425, 121_040_160, 31_910_913, 7_579_136, 1_594_369, 290_592, 44_545, 5504, 513, 32, 1, 0, 1, 32, 513, 5504, 44_545, 290_592, 1_594_369, 7_579_136, 31_910_913, 121_040_160, 419_239_425, 1_340_645_760, 3_994_294_785, 11_172_756_000, 29_532_022_785, 74_174_404_608, 177_880_832_001, 409_008_911_904, 905_007_786_497, 1_933_232_552_320, 3_998_179_870_209], MultiDimensionalFigurateNumbers.generalized_k_dimensional_hyperoctahedron(16, 23).take(45))
  end

  def test_generalized_hyperdodecahedral
    assert_equal([22_952_980, 18_786_801, 15_215_220, 12_178_783, 9_621_168, 7_489_185, 5_732_776, 4_305_015, 3_162_108, 2_263_393, 1_571_340, 1_051_551, 672_760, 406_833, 228_768, 116_695, 51_876, 18_705, 4708, 543, 0, 1, 600, 4983, 19_468, 53_505, 119_676, 233_695, 414_408, 683_793, 1_066_960, 1_592_151, 2_290_740, 3_197_233, 4_349_268, 5_787_615, 7_556_176, 9_701_985, 12_275_208, 15_329_143], MultiDimensionalFigurateNumbers.generalized_hyperdodecahedral(20).take(40))
  end

  def test_generalized_hypericosahedral
    assert_equal([4_252_060, 3_480_401, 2_818_860, 2_256_427, 1_782_672, 1_387_745, 1_062_376, 797_875, 586_132, 419_617, 291_380, 195_051, 124_840, 75_537, 42_512, 21_715, 9676, 3505, 892, 107, 0, 1, 120, 947, 3652, 9985, 22_276, 43_435, 76_952, 126_897, 197_920, 295_251, 424_700, 592_657, 806_092, 1_072_555, 1_400_176, 1_797_665, 2_274_312, 2_839_987], MultiDimensionalFigurateNumbers.generalized_hypericosahedral(20).take(40))
  end

  def test_generalized_polyoctahedral
    assert_equal([512_800, 419_121, 338_904, 270_793, 213_504, 165_825, 126_616, 94_809, 69_408, 49_489, 34_200, 22_761, 14_464, 8673, 4824, 2425, 1056, 369, 88, 9, 0, 1, 24, 153, 544, 1425, 3096, 5929, 10_368, 16_929, 26_200, 38_841, 55_584, 77_233, 104_664, 138_825, 180_736, 231_489, 292_248, 364_249], MultiDimensionalFigurateNumbers.generalized_polyoctahedral(20).take(40))
  end

  def test_generalized_k_dimensional_mgonal_pyramidal
    assert_equal([-1770, -636, -188, -41, -5, 0, 0, 0, 0, 0, 0, 1, 13, 76, 300, 930, 2442, 5676, 12_012, 23_595], MultiDimensionalFigurateNumbers.generalized_k_dimensional_mgonal_pyramidal(7, 8, 10).take(20))
  end

  def test_generalized_k_dimensional_centered_hypercube
    assert_equal([-29_487_171, -14_782_969, -6_880_121, -2_920_695, -1_103_479, -358_061, -94_509, -18_571, -2315, -129, -1, 1, 129, 2315, 18_571, 94_509, 358_061, 1_103_479, 2_920_695, 6_880_121], MultiDimensionalFigurateNumbers.generalized_k_dimensional_centered_hypercube(7, 10).take(20))
  end

  def test_generalized_k_dimensional_centered_hypertetrahedron
    assert_equal([-11_404, -6427, -3431, -1716, -792, -330, -120, -36, -8, -1, 0, 1, 8, 36, 120, 330, 792, 1716, 3431, 6427], MultiDimensionalFigurateNumbers.generalized_k_dimensional_centered_hypertetrahedron(6, 10).take(20))
  end

  def test_generalized_k_dimensional_centered_hyperoctahedron
    assert_equal([-5_984_767, -3_800_305, -2_340_495, -1_392_065, -795_455, -433_905, -224_143, -108_545, -48_639, -19_825, -7183, -2241, -575, -113, -15, 1, 15, 113, 575, 2241, 7183, 19_825, 48_639, 108_545, 224_143], MultiDimensionalFigurateNumbers.generalized_k_dimensional_centered_hyperoctahedron(7, 15).take(25))
  end

  def test_generalized_nexus
    assert_equal([-260_220_508_800_347_567_049_960_166_785, -62_394_050_318_236_105_019_081_059_711, -13_619_912_495_610_491_637_711_803_009, -2_671_398_930_043_370_423_979_492_255, -463_303_923_170_979_668_638_153_825, -69_647_114_527_583_233_038_729_695, -8_849_732_675_807_611_094_711_841, -920_233_556_923_127_490_136_639, -75_044_076_594_002_864_649_665, -4_530_785_251_489_078_799_295, -186_842_850_042_244_797_505, -4_678_776_693_546_226_271, -59_323_169_798_679_969, -281_192_547_174_175, -282_412_759_265, -16_777_215, -1, 1, 16_777_215, 282_412_759_265, 281_192_547_174_175, 59_323_169_798_679_969, 4_678_776_693_546_226_271, 186_842_850_042_244_797_505, 4_530_785_251_489_078_799_295, 75_044_076_594_002_864_649_665, 920_233_556_923_127_490_136_639, 8_849_732_675_807_611_094_711_841, 69_647_114_527_583_233_038_729_695, 463_303_923_170_979_668_638_153_825, 2_671_398_930_043_370_423_979_492_255, 13_619_912_495_610_491_637_711_803_009, 62_394_050_318_236_105_019_081_059_711, 260_220_508_800_347_567_049_960_166_785, 998_810_173_737_782_797_796_233_865_855, 3_560_504_085_908_452_115_276_557_294_945, 11_878_453_069_039_153_182_283_704_722_079, 37_330_982_377_272_584_130_510_593_262_881, 111_142_894_267_009_681_649_466_420_951_775, 314_999_671_352_219_711_010_188_742_728_385], MultiDimensionalFigurateNumbers.generalized_nexus(23, 17).take(40))
  end

  def test_cuban_numbers
    assert_equal([7, 19, 37, 61, 91, 127, 169, 217, 271, 331, 397, 469, 547, 631, 721, 817, 919, 1027, 1141, 1261, 1387, 1519, 1657, 1801, 1951, 2107, 2269, 2437, 2611, 2791, 2977, 3169, 3367, 3571, 3781, 3997, 4219, 4447, 4681, 4921, 5167, 5419, 5677, 5941, 6211, 6487, 6769, 7057, 7351, 7651], MultiDimensionalFigurateNumbers.cuban_numbers.take(50))
  end

  def test_quartan_numbers
    assert_equal([2, 17, 97, 257, 337, 641, 881, 1297, 2417, 2657, 3697, 4177, 4721, 6577, 10_657, 12_401, 14_657, 14_897, 15_937, 16_561, 28_817, 38_561, 39_041, 49_297, 54_721, 65_537, 65_617, 66_161, 66_977, 80_177, 83_537, 83_777, 89_041, 105_601, 107_377, 119_617, 121_937, 130_337, 131_617, 134_417,
                  140_321, 149_057, 151_057, 160_001, 160_081, 166_561, 168_737, 204_481, 243_521, 260_017, 279_857, 280_097, 283_937, 284_881, 289_841, 317_777, 331_777, 334_177, 346_417, 360_337, 384_817, 391_921, 394_721, 411_361, 457_057, 459_377, 462_097, 463_537, 471_617, 531_457, 587_297, 596_977, 614_657,
                  621_217, 643_217, 728_017, 736_817, 744_977, 745_697, 812_257, 812_401, 824_641, 838_561, 847_601, 867_281, 893_521, 941_537, 944_257, 961_937, 988_417, 1_049_201, 1_050_977, 1_055_137, 1_089_841, 1_146_097, 1_178_897, 1_224_337, 1_328_417, 1_336_337, 1_336_417, 1_336_961, 1_338_737, 1_342_897, 1_345_921, 1_350_977, 1_364_897, 1_466_657, 1_501_921, 1_521_361, 1_682_017, 1_763_137, 1_800_577, 1_809_937, 1_874_177, 1_874_417, 1_878_257, 1_912_577, 1_959_457, 1_972_097, 2_034_161], MultiDimensionalFigurateNumbers.quartan_numbers.take(120))
  end

  def test_pell_numbers
    assert_equal([0, 1, 2, 5, 12, 29, 70, 169, 408, 985, 2378, 5741, 13_860, 33_461, 80_782, 195_025, 470_832, 1_136_689, 2_744_210, 6_625_109, 15_994_428, 38_613_965, 93_222_358, 225_058_681, 543_339_720, 1_311_738_121, 3_166_815_962, 7_645_370_045, 18_457_556_052, 44_560_482_149, 107_578_520_350, 259_717_522_849, 627_013_566_048, 1_513_744_654_945, 3_654_502_875_938], MultiDimensionalFigurateNumbers.pell_numbers.take(35))
  end

  def test_carmichael_numbers
    assert_equal([561, 1105, 1729, 2465, 2821, 6601, 8911, 10_585, 15_841, 29_341, 41_041, 46_657, 52_633, 62_745, 63_973, 75_361, 101_101, 115_921, 126_217, 162_401, 172_081, 188_461, 252_601, 278_545, 294_409, 314_821, 334_153, 340_561, 399_001, 410_041, 449_065, 488_881, 512_461, 530_881, 552_721], MultiDimensionalFigurateNumbers.carmichael_numbers.take(35))
  end

  def test_stern_prime_numbers
    assert_equal([2, 3, 17, 137, 227, 977, 1187, 1493], MultiDimensionalFigurateNumbers.stern_prime_numbers.take(8))
  end

  def test_apocalyptic_numbers
    assert_equal([157, 192, 218, 220, 222, 224, 226, 243, 245, 247, 251, 278, 285, 286, 287, 312, 355, 361, 366, 382, 384, 390, 394, 411, 434, 443, 478, 497, 499, 506, 508, 528, 529, 539, 540, 541, 564, 578, 580, 582, 583, 610, 612, 614, 620, 624, 635, 646, 647, 648, 649, 650, 660, 662, 664, 666, 667, 669, 671, 684], MultiDimensionalFigurateNumbers.apocalyptic_numbers.take(60))
  end
end
